---
layout: post
title:  "Teaching Machines to Draw"
date:   2018-05-15 21:09:29 +0100
hasDemo: true
---


The goal of this project was twofold. On a technical level, it created an opportunity to explore physical computing (using the Arduino platform), interaction design and generative imagery. On a conceptual level, it allowed me to investigate human-machine relationships from a cultural perspective.

## Background

There was a short window in the early 1970s when computers had enough power to create graphics, but inkjet printers weren't widely available yet. During this time, a drawing machine was the only way to get an image on paper.

<div class='masonry-2 full' markdown='1'>
![Calcomp](/assets/machines/calcomp-1.jpg)
![Calcomp](/assets/machines/calcomp-2.jpg)
</div>

Diagrams for early microchips were drawn out by plotters:

### Machine artists

<div class='masonry-5 bleed' markdown='1'>
![Molnar](/assets/machines/vera_molnar_1.jpg)
![Letraset](/assets/machines/letraset.jpg)
![Letraset](/assets/machines/lewitt.jpg)
![Letraset](/assets/machines/mad_sans.PNG)
![Thomas Muller](/assets/machines/thomas-muller-1.jpg)
![Thomas Muller](/assets/machines/thomas-muller-2.jpg)
![Thomas Muller](/assets/machines/thomas-muller-3.jpg)
![Letraset](/assets/machines/plotter_art.jpg)
![Letraset](/assets/machines/sol_lewitt_wall_drawing.jpg)
![Letraset](/assets/machines/sol_lewitt_1.jpg)
![Letraset](/assets/machines/coal_drawing_machine.jpg)
![Letraset](/assets/machines/bauhaus.jpg)
![Letraset](/assets/machines/robert-moog_1.jpg)
![Sam Lucente](/assets/machines/intel.jpg)
![Sam Lucente](/assets/machines/sam-lucente-1.jpg)
![Sam Lucente](/assets/machines/sam-lucente-2.jpg)
![Sam Lucente](/assets/machines/sam-lucente-3.jpg)
</div>


### Early experiments

### Drawing Machine One

Drawing Machine One is based on the same mechanism as commercial 3d printers, vinyl cutters and CNC-machines. The drawing instrument is fixed to platform that slides along two sets of steel rods on linear bearings. Timing belts connect the platform to two stepper motors, one for each axis of movement. A computer sets the speed and direction of each stepper motor to move the platform around on the drawing surface.

#### Progression

The first images I drew on the machine were primarily intended to test the mechanism. They are the result of very simple programs interacting directly with the stepper motor.

```
Repeat:
    Move Stepper A by 100 steps in a random direction;
    Move Stepper B by 100 steps in a random direction;
    Wait 200ms;
```

Next, I wrote driver software that could move the pen to predetermined points (using maths to work out the precise speed and direction of each stepper). By stringing together a series of points, I could 'write out' a drawing and have the machine execute it. The code for a square might look something like this:

```
Go to the following points one after another:
    [100,100]
    [200,100]
    [200,200]
    [100,200]
    [100,100]
```

Writing these instructions by hand quickly becomes tedious. I put together a script that could generate them automatically from an SVG file - the kind you can export from Illustrator. Now I could design drawings visually in Illustrator and send them to the machine. I used the `transform` filter in Illustrator to generate these drawings of repeated shapes. Each one typically translated into hundreds of machine instructions.

![Machine drawing](/assets/machines/dm1-1.jpg)

As these geometric drawing started to become repeteteive, I started to look for other ways to generate images. Drawing bitmap images seemed like a way to expand the limits of the machine. 

```
Scale the image;
Convert the image to black and white;
Repeat for each pixel in the image:
    Translate the brightness into a number n between 0 and 255;
    Add n zig-zags to the result;
Save the result as an SVG.
```

Images created in this way translated into tens of thousands of machine instructions, and took hours to execute.

After running a series of black and white images, I started to look for a way to draw full-colour images. The process I developed amounts to drawing four single-colour images on top each other, one each for the cyan, magenta, yellow and black channels. I was able to source ballpoint pens that matched process colours surprisingly accurately and led to good results.

The full workflow for a colour image looks like this:

1. Split the source image into CMYK
2. Adjust the contrast for each channel
3. Convert each channel to zig-zags
4. Load all four zig-zag images into Illustrator and scale them to the final size. Export as SVGs.
5. Convert all four SVGs to machine instructions
6. Run all four sets of instructions, changing the pen for each colour.

I wrote roughly 2000 lines of Node.js code to do all of this. This is available [here](https://github.com/awesomephant/bitmapToVector) and [here](https://github.com/awesomephant/robotics).

<p class="full hasimage" style="padding:92% 0 0% 0;position:relative;"><iframe src="https://player.vimeo.com/video/271333952?autoplay=1&loop=1&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
Six-hour timelapse showing one of the first four-colour drawings I ran. The image comes from my research into machine learning datasets</a>
</p>

A final refinement of this process is to look at colours other than CMYK. I discovered a Swiss research group that creates software to create colour separations for two, three, four or five colours. This is used by commercial printers to create the illusion of full-colour images in fewer plates.

![Colourlibrary](/assets/machines/colorch.jpg)
Full-colour image printed in red and green spot colours[colorlibraries.ch](http://colorlibrary.ch/how-to-install/)

They offer a profile for red, green and blue ink. This seemed especially appropriate because it mirrors the 'default' colours of cheap ballpoint pens.

## Drawing Machine Two

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/271887427?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>Drawing Machine Two at the Work in progress show</p>


I spent a considerable amount of time making the first drawing machine mecanically sound. This was satisfying, but it also made the results of the machine more and more predictable - it became essentially a big, slow printer.

Bored, I made the decision to take a week to build a second drawing machine. Unlike the first machine, it wouldn't run on a predetermined program. Instead, I designed a control panel that would allow me to use the machine as a real-time drawing instrument. The machine also used a much simpler mechanism: The pen is conected to the steppers by wire, and pushed against a vertical drawing surface by gravity.


![DM2 Schema](/assets/machines/dm2-drawing.jpg)

![DM2 Schema](/assets/machines/dm2-1.jpg)

The main advantage of this mechanism is that it scales easily - to go from A2 to the size of a wall just required more fishing line.


The exact control mechanism of the machine is easier demonstrated than explained:

{% include dm2-demo.html %}

A more [technnical description is available](http://www.maxkoehler.com/2017/teaching-machines-to-draw/#january-28-2018-another-drawing-machine) in my notes.

The idea to use the machine as a real-time drawing instrument failed largely because it's too slow - the few drawings I completed each took hours. There was also the issue of noise - the cheap potentiometers I used were badly shielded, and my wiring probably didn't help either. While this did introduce some interesting side effects (such as the machine reacting to cell phones going off nearby), it made it difficult to keep the pen under control.

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/271718470?autoplay=1&loop=1&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>

One attempt to mitigate this was to do away with the motors, and project a simulated version of the mechanism. The simulation could much faster, and removing the motors and their related circuit reduced the noise dramatically. 

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/256795786?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>

<div class="references" markdown='1'>
- [Thomas Muller](http://thomas-mueller-drawings.com/albums/grossformatige-zeichnungen/#)
- [Sam Lucente](https://www.moma.org/artists/6612?locale=en)
</div>