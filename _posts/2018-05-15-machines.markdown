---
layout: post
type: 'Process'
title:  "Teaching Machines to Draw"
date:   2018-05-15 21:09:29 +0100
hasDemo: true
---

The goal of this project was twofold. On a technical level, it created an opportunity to explore physical computing (using the Arduino platform), interaction design and generative imagery. On a conceptual level, it allowed me to investigate human-machine relationships from a cultural perspective.

## Historical Background

There was a short window in the early 1970s when computers had enough power to create graphics, but inkjet printers weren't widely available yet. During this time, a drawing machine was the only way to get an image on paper.

<div class='masonry-2 full' markdown='1'>
![Calcomp](/handin18/assets/machines/calcomp-1.jpg)
![Calcomp](/handin18/assets/machines/calcomp-2.jpg)
</div>

## Visual References

<div class='masonry-5 bleed' markdown='1'>
![Molnar](/handin18/assets/machines/vera_molnar_1.jpg)
![Molnar](/handin18/assets/machines/vera_molnar_2.jpg)
![Molnar](/handin18/assets/machines/vera_molnar_3.jpg)
![Letraset](/handin18/assets/machines/letraset.jpg)
![mad sans](/handin18/assets/machines/mad_sans.PNG)
![gt cinetype](/handin18/assets/machines/cinetype.gif)
![Thomas Muller](/handin18/assets/machines/thomas-muller-1.jpg)
![Thomas Muller](/handin18/assets/machines/thomas-muller-2.jpg)
![Thomas Muller](/handin18/assets/machines/thomas-muller-3.jpg)
![Letraset](/handin18/assets/machines/plotter_art.jpg)
![Letraset](/handin18/assets/machines/sol_lewitt_wall_drawing.jpg)
![Letraset](/handin18/assets/machines/sol_lewitt_1.jpg)
![Letraset](/handin18/assets/machines/coal_drawing_machine.jpg)
![Letraset](/handin18/assets/machines/bauhaus.jpg)
![Letraset](/handin18/assets/machines/robert-moog_1.jpg)
![Sam Lucente](/handin18/assets/machines/intel.jpg)
![Sam Lucente](/handin18/assets/machines/sam-lucente-1.jpg)
![Sam Lucente](/handin18/assets/machines/sam-lucente-2.jpg)
![Sam Lucente](/handin18/assets/machines/sam-lucente-3.jpg)
![Il Lee](/handin18/assets/machines/IL_LEE-Untitled303.jpg)
![Il Lee](/handin18/assets/machines/il_lee_2.jpg)
![Kuhne](/handin18/assets/machines/dafi-kuhne.jpg)
![Kuhne](/handin18/assets/machines/dafi-kuhne-2.jpg)
![Condiditonal design](/handin18/assets/machines/workbook-conditional-design.jpg)
![Moniker](/handin18/assets/machines/moniker-sand-pen.jpg)
![Moniker](/handin18/assets/machines/moniker-do-not-touch.jpg)
![Moniker](/handin18/assets/machines/moniker-red-yellow-blue.jpg)
![Mexico Olympics](/handin18/assets/machines/mexico-68-olympics-03.jpg)
![Jetset](/handin18/assets/machines/experimental-jetset-automatically_arranged_alphabets.jpg)
![Tinguley](/handin18/assets/machines/tinguley.jpg)
![Lewitt](/handin18/assets/machines/sol_lewitt_2.jpg)
![Lewitt](/handin18/assets/machines/sol_lewitt_3.jpg)
![lewit](/handin18/assets/machines/lewitt.jpg)
![Glitch](/handin18/assets/machines/DJ3PjQ6X0AANSWp.jpg)
![Mayer](/handin18/assets/machines/hansjorg_mayer_1.jpg)
![Morrelet](/handin18/assets/machines/francois_morrelet_1.jpg)
![Morrelet](/handin18/assets/machines/francois_morrelet_2.jpg)
![Morrelet](/handin18/assets/machines/francois_morrelet_3.jpg)
![Morrelet](/handin18/assets/machines/francois_morrelet_4.jpg)

</div>


## Drawing Machine One

A major reason to try and build a functioning drawing machine was to learn electrical engineering and physical computing. I was fairly confident I could solve the programming problems (and I had already worked out some of the logic over the summer) but I coudldn't remember the last time I touched a soldering iron. I hoped that taking on a large project like this drawing machine would create the necessary pressure to to learn what I had to.

I found that while there is good documentation online about some of the more advanced problems (how to control a motor, how to interface with a computer), I there is little about the fundamental techniques. [My notes](http://www.maxkoehler.com/2017/teaching-machines-to-draw/) contain such episodes as me spending nearly a week trying to figure out how to connect two electrical wires. (It turns out the correct procedure is to remove the isolation on both wires, add heatshink tubing, twist them together, add flux, solder and apply the heatshrink).

#### Progression

It took about a month to get the machine to a working state. The first images I drew were  primarily intended to test the mechanism. They are the result of very simple programs interacting directly with the stepper motor. These programs looked similar to this:

``` pseudocode
Repeat:
    Move Stepper A by 100 steps in a random direction;
    Move Stepper B by 100 steps in a random direction;
    Wait 200ms;
```

This resulted in a diagonal pattern of movement:

<div style="padding:100% 0 0 0;position:relative;" class='full'><iframe src="https://player.vimeo.com/video/271765182?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>

Next, I wrote driver software that could move the pen to predetermined points (using maths to work out the precise speed and direction of each stepper). By stringing together a series of points, I could 'write out' a drawing and have the machine execute it. The instructions for a square might look something like this:

```pseudocode
Go to the following [x,y] coordniates one after another:
    [100,100]
    [200,100]
    [200,200]
    [100,200]
    [100,100]
```

Writing these instructions by hand quickly becomes tedious, so I started to write simple programs to generate them for me. I liked the idea of writing a small set of instructions and having the computer extrapolate them into a complex image - maybe analogous to Lewitt's wall drawings, where a small set of instructions is interpreted by an assistant. The programs I wrote at this stage where rarely longer than a few dozen lines, and largely consisted of repeating, translating and randomising basic geometric shapes.

<p data-height="450" data-theme-id="33564" data-slug-hash="opyLLa" data-default-tab="result" data-user="maxakohler" data-embed-version="2" data-pen-title="Snap Woodgrain" class="codepen">See the Pen <a href="https://codepen.io/maxakohler/pen/opyLLa/">Snap Woodgrain</a> by Max Kohler (<a href="https://codepen.io/maxakohler">@maxakohler</a>) on <a href="https://codepen.io">CodePen</a>.</p>

<p data-height="450" data-theme-id="33564" data-slug-hash="LeXvem" data-default-tab="result" data-user="maxakohler" data-embed-version="2" data-pen-title="Snap Lines" class="codepen">See the Pen <a href="https://codepen.io/maxakohler/pen/LeXvem/">Snap Lines</a> by Max Kohler (<a href="https://codepen.io/maxakohler">@maxakohler</a>) on <a href="https://codepen.io">CodePen</a>.</p>

<p data-height="450" data-theme-id="33564" data-slug-hash="XevGoY" data-default-tab="result" data-user="maxakohler" data-embed-version="2" data-pen-title="Snap Random Line" class="codepen">See the Pen <a href="https://codepen.io/maxakohler/pen/XevGoY/">Snap Random Line</a> by Max Kohler (<a href="https://codepen.io/maxakohler">@maxakohler</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/handin18/assets/embed/ei.js"></script>

Doing this, I found that *repetition* led to particularly good results (more than randomisation or other forms of image-generation). With repeated shapes the drawing becomes about the machine itself - Any instance of the machine getting stuck, the pen leaking etc. becomes visible in the drawing. The machine also has a tendency to pick up vibrations - people walking by or touching the machine table leave traces in the drawings.

![Machine drawing](/handin18/assets/machines/ai.png)
Machine drawings in Illustrator

I realised that to produce these drawings consistently I needed some way of designing them visually. Writing a piece of software that could generate machine instructions from an Illustrator file was the solution to this. Now I could prepare multiple drawings at once, scale them to the size of the paper and run them consistently.

I used this technique to complete a series of geometric drawings.

![Machine drawing](/handin18/assets/machines/dm1-1.jpg)

The issue with these drawings was that they're exactly what you'd expect coming from the machine. [Many people offered ideas](http://www.maxkoehler.com/2017/teaching-machines-to-draw/#november-24-2017) on how I could make things more interesting. Looking at the geometric drawings I'd done, I noticed an interesting effect - in places where the lines where close engouh together, they seemed to melt together into a continuous grey tone (much like halftone dots).

I started looking into ways of replicating and controlling this effect. I figured that (as with halftone printing) photographs would make a good starting point. Eventually I developed a program that could read any bitmap image and generate a halftone version the machine could draw. The algorithm works like this:

```pseudocode
Scale the image;
Convert the image to black and white;
Repeat the following for each pixel in the image:
    Translate the brightness into a number between 0 and 255;
    Fill the pixel with that number of zig-zag lines;
Save the result
```

This process often produced drawings with tens of thousands of individual lines which took hours to execute. However, the results were promising:

I experimented with ways of randomising the lines in each pixel and drawing multiple layers with different resolutions, but the basic method I initially developed tended to be more accurate and produced more even colours.

I like these for their etching-like quality. Pressed into the paper by the steel frame of the machine, the ballpoint pen produces a deep impression and a rich black. The edges of the drawing are irregular due to a rounding error in the code, which leads to each point in the drawing being out of place by a fraction of a millimetre. This adds up over hudreds of points until it produces the irregularity visible in the drawing. I took [some steps](https://github.com/awesomephant/robotics/commit/eec83211e9f2fde864d2f1ed840aa4e407caa58a) to [reduce this effect](https://github.com/awesomephant/robotics/commit/045d4b0abe6cdbeb08829ea771f6aa17dabdbaf1) so it became managable. However, I decided against eliminating it completely because it adds a degree of randomness to the machine that was missing before. It also helps to make the production process visible in the images. (I left the line that shows the machine moving back to its starting point at the end of each drawing for the same reason).

Knowing that my process of drawing monochrome images essentially mirrorred halftone printing, drawing full-colour images seemed like a natural progression. I was able to [source ballpoint pens](http://www.maxkoehler.com/2017/teaching-machines-to-draw/#january-26-2018) that matched CMYK process colours surprisingly well and led to good results.

The full workflow for a colour image looks like this:

```pseudocode
Split the source image into CMYK channels
Adjust the contrast for each channel
Convert each channel to zig-zags (Using the algorithm above)
Load all four zig-zag images into Illustrator and scale them to the final size. Export as SVGs.
Convert all four SVGs to machine instructions
Run all four sets of instructions, changing the pen for each colour.
```

The software I wrote to do this is [open source](https://github.com/awesomephant/bitmapToVector).

<p class="full hasimage" style="padding:92% 0 0% 0;position:relative;"><iframe src="https://player.vimeo.com/video/271333952?autoplay=1&loop=1&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
Six-hour timelapse showing one of the first four-colour drawings I ran. The image comes from my research into machine learning datasets
</p>

A final refinement of this process is to look at colours other than CMYK. I discovered a Swiss research group that creates software to create colour separations for two, three, four or five colours. This is used by commercial printers to create the illusion of full-colour images in fewer plates.

![Colourlibrary](/handin18/assets/machines/colorch.jpg)
Full-colour image printed in red and green spot colours[colorlibraries.ch](http://colorlibrary.ch/how-to-install/)

Among many others, they offer a profile for red, green and blue ink. This seemed appropriate because it mirrors the 'default' colours of cheap ballpoint pens. I was able to source the profile and used to create a number of drawings.

## Drawing Machine Two

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/271887427?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>Drawing Machine Two at the Work in progress show</p>


I spent a considerable amount of time making the first drawing machine mecanically sound. This was satisfying, but it also made the results of the machine more and more predictable - it became essentially a big, slow printer.

Bored, I made the decision to take a week to build a second drawing machine. This one used a much simpler mechanism than Drawing Machine One: The pen is conected to the steppers by wire, and pushed against a vertical drawing surface by gravity (eliminating the need for bearings, steel rods etc). More importantly, it wouldn't run on a predetermined program like the first machine. Instead, I designed a control panel that would allow me to use the machine as a real-time drawing instrument.

<p class='full' markdown='1'>
![DM2 Schema](/handin18/assets/machines/dm2-schema.svg)
Wiring diagram for Drawing Machine 2
</p>

<p class='masonry-2 full' full markdown='1'>
![Moog](/handin18/assets/machines/moog.jpg)
![Moog](/handin18/assets/machines/dm2-4.jpg)
</p>

The control mechanism is based on the analogue synthesizer, which uses mathematical wave functions to generate sounds. I used the [same functions](http://www.maxkoehler.com/2017/teaching-machines-to-draw/#january-28-2018-another-drawing-machine) to control the movements of the pen on the page. The knobs and switches on the control panel allow the user to manipulate these functions, which in turn changes the movement of the pen. I kept both the control panel and the digital interface it is connected to verbose (with cryptic instructions), giving viewers room to discover their different functions on their own terms.

<div style="padding:56.25% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/272609059?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>

<div style="padding:56.25% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/271765210?color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>

{% if page.nope %}
{% include dm2-demo.html %}
{% endif %}

The idea to use the machine as a real-time drawing instrument failed largely because it's too slow - the few drawings I completed each took hours. There was also the issue of noise - the cheap potentiometers I used were badly shielded, and my wiring probably didn't help either. While this did introduce some interesting side effects (such as the machine reacting to cell phones going off nearby), it made it difficult to keep the pen under control. This became especially clear at the work in progress show, when I had to constantly reset the machine after the pen had veered off the paper. 

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/271718470?autoplay=1&loop=1&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>

One attempt to mitigate this was to do away with the motors, and project a simulated version of the mechanism. The simulation could much faster, and removing the motors and their related circuit reduced the visual noise dramatically. The more instant feedback from the projection allowed people to develop an understanding of the mechanism without me explaining it to them - a promising result.

<p class="bleed hasimage" style="padding:100% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/256795786?autoplay=1&loop=1&color=ffffff&title=0&byline=0&portrait=0" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>

![Machine drawing](/handin18/assets/machines/dm2-large.png)
DM2 Installation Mockup

There was some talk about installing a version of Drawing Machine Two on the side of the college building. I wrote software that would essentially automate the act of me twisting the knobs on the control panel, allowing me to plan out a series of drawings I could run during the installation.

<div class='masonry-5 full' markdown='1'>
![Machine drawing](/handin18/assets/machines/large-scale-5.png)
![Machine drawing](/handin18/assets/machines/large-scale-6.png)
![Machine drawing](/handin18/assets/machines/large-scale-7.png)
![Machine drawing](/handin18/assets/machines/large-scale-8.png)
![Machine drawing](/handin18/assets/machines/large-scale-9.png)
</div>

I abandoned the plan after learning about the health and safety requirements for an installation like this - It's the kind of job you have to be an actual engineer for.

<div class="references" markdown='1'>
- [Thomas Muller](http://thomas-mueller-drawings.com/albums/grossformatige-zeichnungen/#)
- [Sam Lucente](https://www.moma.org/artists/6612?locale=en)
</div>